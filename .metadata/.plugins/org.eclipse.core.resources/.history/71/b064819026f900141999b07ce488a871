package bingo;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Random;
import java.util.TreeMap;

import bingo.checkers.BlackoutChecker;
import bingo.interfaces.Caller;
import bingo.interfaces.CardChecker;
import bingo.interfaces.CardFactory;
import bingo.interfaces.FrequenciesOutput;
import bingo.interfaces.Simulation;
import bingo.output.FrequenciesCSVOutput;
import bingo.output.FrequenciesHistogramOutput;
import bingo.simulations.BasicSimulation;

public class Main {

	private static final Random random = new Random();
	private static final int MIN_NUM_PLAYERS = 25;
	private static final int MAX_NUM_PLAYERS = 25;
	private static final int NUM_SIMULATIONS = 10000;
	private static final String FILE_NAME_PREFIX = "/Users/chadheise/Documents/programming/bingo/results/simulation_";
	private static final String PICTURE_PREFIX = "/Users/chadheise/Documents/programming/bingo/results/pics/";
	private static final String FILE_EXTENSION = ".csv";
	private static final String PICTURE_EXTENSION = ".png";
	
	public static void main(String[] args) throws IOException {
		CardFactory cardFactory = new RandomCardFactory(random);
		CardChecker checker = new BlackoutChecker();
		
		// For each number of players
		for (int numPlayers=MIN_NUM_PLAYERS; numPlayers<= MAX_NUM_PLAYERS; numPlayers++) {
			// Run simulations
			System.out.println("Running simulation");
			// Maps the number of calls before someone wins to the number of simulations where that was the case
			Map<Integer, Integer> results = new TreeMap<Integer, Integer>();
			
			for (int i=0; i < NUM_SIMULATIONS; i++) {
				Caller caller = new RandomCaller();
				Simulation simulation = new BasicSimulation(numPlayers, cardFactory, caller, checker);
				int callsBeforeWinner = simulation.run().numCalls();
				if (results.containsKey(callsBeforeWinner)) {
					results.put(callsBeforeWinner, results.get(callsBeforeWinner) + 1);
				}
				else {
					results.put(callsBeforeWinner, 1);
				}
				if (i%10000 == 0) {
					System.out.println("Done with simulation " + numPlayers + " - "+ i);
				}
			}
			
			//String filePath = FILE_NAME_PREFIX + numPlayers + FILE_EXTENSION;
			//FrequenciesOutput output = new FrequenciesCSVOutput(filePath);
			String filePath = PICTURE_PREFIX + numPlayers + PICTURE_EXTENSION;
			FrequenciesOutput output = new FrequenciesHistogramOutput(filePath);
			//output.output(results);
			System.out.println("no more ouput");
			
		}

	}
	
}
