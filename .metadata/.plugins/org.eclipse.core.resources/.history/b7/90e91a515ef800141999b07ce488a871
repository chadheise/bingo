package bingo;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import bingo.interfaces.Column;
import bingo.interfaces.ColumnFactory;
import bingo.interfaces.Space;

public class RandomColumnFactory implements ColumnFactory {

	private static final int COLUMN_LENGTH = 5;
	private static final Random random = new Random();
	
	@Override
	public Column createColumn(Letter letter) {
		List<Space> spaces = new ArrayList<Space>();
		for (int i=0; i < COLUMN_LENGTH; i++) {
			Space space;
			if (Letter.O.equals(letter) && i == (COLUMN_LENGTH - 1)/2) {
				space = new FreeSpace();
			}
			else { 
				int value = letter.rangeStart() + random.nextInt(letter.rangeEnd() - letter.rangeStart());
				space = new SpaceImpl(value);
			}
			spaces.add(space);
		}
		
		return new ColumnImpl(spaces);
		
	}

	private class ColumnImpl implements Column {

		private List<Space> spaces;

		private ColumnImpl(List<Space> spaces) {
			this.spaces = spaces;
		}
		
		@Override
		public boolean isCovered(int i) {
			return spaces.get(i).isCovered();
		}

		@Override
		public boolean cover(int value) {
			for (Space space : spaces) {
				if (space.getValue() == value) {
					space.cover();
					return true;
				}
			}
			return false;
		}

		@Override
		public int getValue(int row) {
			return spaces.get(row).getValue();
		}
		
	}
	
}
