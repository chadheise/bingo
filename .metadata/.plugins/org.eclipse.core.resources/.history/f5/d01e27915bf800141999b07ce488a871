package bingo;

import java.util.HashMap;
import java.util.Map;

import bingo.interfaces.Card;
import bingo.interfaces.CardFactory;
import bingo.interfaces.Column;

public class RandomCardFactory implements CardFactory {

	private static final RandomColumnFactory COLUMN_FACTORY = new RandomColumnFactory();

	@Override
	public Card createCard() {
		
		Map<Letter, Column> columns = new HashMap<Letter, Column>();
		for (Letter letter : Letter.values()) {
			columns.put(letter, COLUMN_FACTORY.createColumn(letter));
		}
		
		return new CardImpl(columns);
		
	}

	private class CardImpl implements Card {

		Column b;
		Column i;
		Column n;
		Column g;
		Column o;
		
		Map<Letter, Column> columns = new HashMap<Letter, Column>();

		private CardImpl(Map<Letter, Column> columns) {
			this.columns = columns;
		}
		
		private CardImpl(Column b, Column i, Column n, Column g, Column o) {
			this.b = b;
			this.i = i;
			this.n = n;
			this.g = g;
			this.o = o;
		}

		@Override
		public void coverSpace(int value) {
			Letter.getLetter(value);

		}

		@Override
		public boolean isCovered(Letter letter, int row) {
			// TODO Auto-generated method stub
			return false;
		}

	}

}
