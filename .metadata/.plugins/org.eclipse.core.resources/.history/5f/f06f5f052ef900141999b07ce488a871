package bingo.simulations;

import java.util.Collection;
import java.util.HashSet;

import bingo.game.Game;
import bingo.game.GameResults;
import bingo.interfaces.Caller;
import bingo.interfaces.Card;
import bingo.interfaces.CardChecker;
import bingo.interfaces.CardFactory;
import bingo.output.CardPrinter;

public class GameImpl implements Game {

	private final int numPlayers;
	private final CardFactory cardFactory;
	private final Caller caller;
	private final CardChecker checker;
	
	CardPrinter printer = new CardPrinter();
	
	public GameImpl(int numPlayers, CardFactory cardFactory, Caller caller, CardChecker checker) {
		this.numPlayers = numPlayers;
		this.cardFactory = cardFactory;
		this.caller = caller;
		this.checker = checker;
	}
	
	@Override
	public GameResults run() {
		GameResultsImpl results = new GameResultsImpl();
		
		Collection<Card> cardsInPlay = new HashSet<Card>();
		for (int i=0; i < numPlayers; i++) {
			cardsInPlay.add(cardFactory.createCard());
		}
		
		while(findWinners(cardsInPlay).isEmpty()) {
			coverSpaces(cardsInPlay, caller.nextNumber());
			results.incrementNumCalls();
		}
		
		return results;
		
	}
	
	private Collection<Card> findWinners(Collection<Card> cards) {
		Collection<Card> winners = new HashSet<Card>();
		for (Card card: cards) {
			if (checker.hasWon(card)) {
				winners.add(card);
			}
		}
		return winners;
	}
	
	private void coverSpaces(Collection<Card> cards, int value) {
		for (Card card : cards) {
			card.coverSpace(value);
		}
	}

}
